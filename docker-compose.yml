# Указываем версию Docker Compose
version: '3.9'

services:
  # Определяем название приложения в services.
  all_inclusive_final:
    # Задаём название сети для контейнера.
    networks:
      - all_inclusive
    # Задаём имя контейнера.
    container_name: all_inclusive_container
    # Сообщаем что для сервиса надо запустить Dockerfile и указываем путь к нему.
    build:
      dockerfile: Dockerfile
    # Устанавливаем команду для применения миграций и для запуска сервера.
    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:1234"
    # Параметр сопоставляющий порты между хостом(8000) и контейнером(8000).
    ports:
      - '1234:1234'
    # В параметр указываются приложения, которые должны быть запущены перед запуском приложения all_inclusive.
    depends_on:
      - db
    # Подгружаем глобальные (логин,пароль БД) переменные для БД из .env файла.
    env_file:
      - .env.template
    # Указываем что всё(все локальные изменения) в текущей директории должно быть доступно в контейнере.
    volumes:
      - .:/all_inclusive
    # Контейнер будет перезапускаться, если он был остановлен, за исключением, когда он был остановлен вручную.
    restart: unless-stopped


  # Определяем название приложения в services.
  db:
    # Задаём название сети для контейнера.
    networks:
      - all_inclusive
    # Задаём имя контейнера.
#    container_name: db_all_inclusive_container
    # Указываем какой образ использовать для запуска контейнера.
    image: postgres:16-alpine
    # Подгружаем переменные для БД из .env файла.
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root1"
      POSTGRES_DB: "all_inclusive"
    # Параметр сопоставляющий порты между хостом(5433) и контейнером(5432).
    ports:
      - '5433:5432'
    # Указываем том для хранения данных БД. Что бы не потерять данный при остановке контейнера.
    volumes:
      - db_data1:/var/lib/postgresql/data
    # Контейнер будет перезапускаться, если он был остановлен, за исключением, когда он был остановлен вручную.
    restart: unless-stopped


  pgadmin:
    # Задаём название сети для контейнера.
    networks:
      - all_inclusive
    # Задаём имя контейнера.
    container_name: pgadmin_container
    # Указываем какой образ использовать для запуска контейнера.
    image: dpage/pgadmin4
    # Подгружаем переменные для админки из .env файла.
    environment:
      PGADMIN_DEFAULT_EMAIL: "glebakulich2007@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "bestinworldx"
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
#      PGADMIN_LISTEN_PORT: 8080
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    # Указываем том для хранения данных Админки БД. Что бы не потерять данный при остановке контейнера.
    volumes:
      - pgadmin:/var/lib/pgadmin
    # Параметр сопоставляющий порты между хостом и контейнером.
    ports:
      - '8080:8080'
    restart: unless-stopped


# Указываем глобально, какие volumes у нас есть.
volumes:
  db_data1:
    driver: local
  pgadmin:
    driver: local



# Соединяем все контейнеры, где указана сеть all_inclusive, в одну сеть.
networks:
  all_inclusive:
    driver: bridge
